{"version":3,"sources":["components/Home/Home.js","components/Header/Header.js","components/Square/Square.js","utils/Player.js","utils/bots/Brandom.js","utils/Bot.js","components/Game/Game.js","components/App/App.js","index.js"],"names":["Home","props","state","rows","cols","sequence","players","name","type","symbol","that","this","className","maxLength","value","onChange","e","target","setState","href","JSON","stringify","React","Component","Header","Square","onClick","style","cursor","width","size","height","fontSize","Player","bot","Brandom","game","key","availableSquares","getAvailableSquares","length","Math","floor","random","Game","parseInt","max","playersObj","parse","entries","i","playerObj","push","squares","getMatrix","running","hasWinner","winner","turn","isBot","setTimeout","square","play","markSquare","rowIndex","colIndex","Array","j","slice","arr","result","findSequenceInArray","getRow","getCol","getCrescentDiagonal","getDecrescentDiagonal","gameState","calculateGameState","handleSquareClick","getSymbol","squaresElements","renderSquare","playerIndex","playerButtonStyles","backgroundColor","color","getName","playerButtons","renderPlayerButton","gridTemplateColumns","renderAllSquares","renderAllPlayerButtons","reset","App","url","URL","window","location","page","searchParams","get","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24380743.chunk.js","sourcesContent":["import React from 'react';\nimport './Home.css';\n\nexport default class Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            rows: 3,\n            cols: 3,\n            sequence: 3,\n            players: [\n                {\n                    name: \"Player 1\",\n                    type: \"Human\",\n                    symbol: \"X\"\n                }, {\n                    name: \"Player 2\",\n                    type: \"Human\",\n                    symbol: \"O\"\n                },\n            ]\n        };\n    }\n\n    render() {\n        const that = this;\n        return (\n            <div className=\"Home\">\n                <h2>New game</h2>\n                <form>\n                    <h3>{this.state.players[0].name || \"Player 1\"}</h3>\n                    <label>Name: <input type=\"name\" maxLength=\"16\" value={this.state.players[0].name} onChange={e => { const players = that.state.players; players[0].name = e.target.value; that.setState({players}); }} /></label>\n                    <label>Type: \n                        <select value={this.state.players[0].type} onChange={e => { const players = that.state.players; players[0].type = e.target.value; that.setState({players}); }}>\n                            <option value=\"Human\">Human</option>\n                            <option value=\"Brandom\">Brandom</option>\n                        </select>\n                    </label>\n                    <label>Symbol: <input type=\"name\" maxLength=\"1\" value={this.state.players[0].symbol} onChange={e => { const players = that.state.players; players[0].symbol = e.target.value; that.setState({players}); }} /></label>\n                </form>\n                <form>\n                <h3>{this.state.players[1].name || \"Player 2\"}</h3>\n                    <label>Name: <input type=\"name\" maxLength=\"16\" value={this.state.players[1].name} onChange={e => { const players = that.state.players; players[1].name = e.target.value; that.setState({players}); }} /></label>\n                    <label>Type: \n                        <select value={this.state.players[1].type} onChange={e => { const players = that.state.players; players[1].type = e.target.value; that.setState({players}); }}>\n                            <option value=\"Human\">Human</option>\n                            <option value=\"Brandom\">Brandom</option>\n                        </select>\n                    </label>\n                    <label>Symbol: <input type=\"name\" maxLength=\"1\" value={this.state.players[1].symbol} onChange={e => { const players = that.state.players; players[1].symbol = e.target.value; that.setState({players}); }} /></label>\n                </form>\n                <form>\n                    <h3>Board</h3>\n                    <label>Rows: <input type=\"number\" value={this.state.rows} onChange={e => that.setState({rows: e.target.value})}/></label>\n                    <label>Columns: <input type=\"number\" value={this.state.cols} onChange={e => that.setState({cols: e.target.value})} /></label>\n                    <label>Sequence to win: <input type=\"number\" value={this.state.sequence} onChange={e => that.setState({sequence: e.target.value})} /></label>\n                </form>\n                <br />\n                <a href={\"?p=game&rows=\" + this.state.rows + \"&cols=\" + this.state.cols + \"&seq=\" + this.state.sequence + \"&players=\" + JSON.stringify(this.state.players)}>Play</a>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './Header.css';\n\nfunction Header() {\n    return (\n        <header className=\"Header\">\n            <h1><a href=\"?\">RATTT</a></h1>\n        </header>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport './Square.css';\n\nexport default class Square extends React.Component {\n    render() {\n        return (\n            <div\n                className=\"Square\"\n                onClick={() => this.props.onClick()}\n                style={{\n                    cursor: this.props.cursor,\n                    width: this.props.size + \"px\",\n                    height: this.props.size + \"px\",\n                    fontSize: this.props.size + \"px\"\n                }}>\n\n                {this.props.value}\n            </div>\n        );\n    }\n}","export default class Player {\n    constructor(symbol, name = \"Player\") {\n        this.symbol = symbol;\n        this.name = name;\n        this.bot = false;\n    }\n\n    getName() {\n        return this.name;\n    }\n\n    setName(name) {\n        this.name = name;\n    }\n\n    getSymbol() {\n        return this.symbol;\n    }\n\n    setSymbol(symbol) {\n        this.symbol = symbol;\n    }\n\n    isBot() {\n        return this.bot;\n    }\n\n    setBot(bot) {\n        this.bot = bot;\n    }\n}","import Bot from '../Bot';\n\nexport default class Brandom extends Bot {\n    constructor(game, key, symbol, name = \"Brandom\") {\n        super(game, key, symbol, name);\n    }\n\n    play() {\n        const availableSquares = this.game.getAvailableSquares();\n        return availableSquares.length ?\n            availableSquares[Math.floor(Math.random() * availableSquares.length)] :\n            null;\n    }\n}","import Player from './Player';\n\nexport default class Bot extends Player {\n    constructor(game, key, symbol, name = \"Bot\") {\n        super(symbol, name);\n        this.bot = true;\n        this.game = game;\n        this.key = key;\n    }\n\n    getGame() {\n        return this.game;\n    }\n\n    setGame(game) {\n        this.game = game;\n    }\n\n    getKey() {\n        return this.key;\n    }\n\n    setKey(key) {\n        this.key = key\n    }\n}","import React from 'react';\nimport Square from '../Square/Square';\nimport './Game.css';\nimport Player from '../../utils/Player';\nimport Brandom from '../../utils/bots/Brandom';\n\nexport default class Game extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.rows = parseInt(this.props.rows) || 3;\n        this.cols = parseInt(this.props.cols) || this.rows;\n        this.sequence = parseInt(this.props.sequence) || Math.max(this.rows, this.cols);\n\n        const playersObj = JSON.parse(this.props.players);\n        if(playersObj.length > 1) {\n            this.players = [];\n\n            for(const [i, playerObj] of playersObj.entries()) {\n                if(!playerObj.name) playerObj.name = \"Player \" + (i + 1);\n                if(!playerObj.symbol) playerObj.symbol = (i + 1) % 10;\n                switch(playerObj.type) {\n                    case \"Brandom\": this.players.push(new Brandom(this, i, playerObj.symbol, playerObj.name)); break;\n                    default: this.players.push(new Player(playerObj.symbol, playerObj.name));\n                }\n            }\n        } else this.players = [new Player(\"X\", \"Player 1\"), new Player(\"O\", \"Player 2\")];\n\n        const squares = this.getMatrix();\n\n        this.state = { squares, running: true, hasWinner: false, winner: null, turn: 0 };\n\n        if(this.players[0].isBot()) {\n            setTimeout(() => {\n                const square = this.players[0].play();\n                this.markSquare(square.rowIndex, square.colIndex);\n            }, 100);\n        }\n    }\n\n    reset() {\n        const squares = this.getMatrix();\n        this.setState({ squares, running: true, hasWinner: false, winner: null, turn: 0 });\n\n        if(this.players[0].isBot()) {\n            setTimeout(() => {\n                const square = this.players[0].play();\n                this.markSquare(square.rowIndex, square.colIndex);\n            }, 100);\n        }\n    }\n\n    getMatrix() {\n        const squares = Array(this.rows);\n        for(let i = 0; i < squares.length; i++) {\n            squares[i] = Array(this.cols);\n            for(let j = 0; j < squares[i].length; j++)\n                squares[i][j] = -1;\n        }\n        return squares;\n    }\n\n    getAvailableSquares() {\n        const availableSquares = [];\n        for(let i = 0; i < this.rows; i++) {\n            for(let j = 0; j < this.cols; j++) {\n                if(this.state.squares[i][j] === -1) {\n                    availableSquares.push({ rowIndex: i, colIndex: j });\n                }\n            }\n        }\n        return availableSquares;\n    }\n\n    getRow(rowIndex) {\n        return this.state.squares[rowIndex].slice();\n    }\n\n    getCol(colIndex) {\n        const arr = [];\n        for(let i = 0; i < this.rows; i++)\n            arr.push(this.state.squares[i][colIndex]);\n        return arr;\n    }\n\n    getCrescentDiagonal(rowIndex, colIndex) {\n        const arr = [];\n        for(let i = rowIndex, j = colIndex; i >= 0 && j < this.cols; i--, j++)\n            arr.push(this.state.squares[i][j]);\n        return arr;\n    }\n\n    getDecrescentDiagonal(rowIndex, colIndex) {\n        const arr = [];\n        for(let i = rowIndex, j = colIndex; i < this.rows && j < this.cols; i++, j++)\n            arr.push(this.state.squares[i][j]);\n        return arr;\n    }\n\n    findSequenceInArray(arr) {\n        let sequence = 1;\n        for(let i = 1; i < arr.length; i++) {\n            if(arr[i] === arr[i - 1] && arr[i] !== -1) {\n                if(++sequence === this.sequence) return { hasWinner: true, winner: arr[i] };\n            } else sequence = 1;\n        }\n        return { hasWinner: false };\n    }\n\n    calculateGameState() {\n        for(let i = 0; i < this.rows; i++) {\n            const result = this.findSequenceInArray(this.getRow(i));\n            if(result.hasWinner) return { running: false, ...result };\n        }\n        for(let i = 0; i < this.cols; i++) {\n            const result = this.findSequenceInArray(this.getCol(i));\n            if(result.hasWinner) return { running: false, ...result };\n        }\n\n        for(let i = this.sequence - 1; i < this.rows; i++) {\n            const result = this.findSequenceInArray(this.getCrescentDiagonal(i, 0));\n            if(result.hasWinner) return { running: false, ...result };\n        }\n\n        for(let i = 1; i <= this.cols - this.sequence; i++) {\n            const result = this.findSequenceInArray(this.getCrescentDiagonal(this.rows - 1, i));\n            if(result.hasWinner) return { running: false, ...result };\n        }\n\n        for(let i = 0; i <= this.rows - this.sequence; i++) {\n            const result = this.findSequenceInArray(this.getDecrescentDiagonal(i, 0));\n            if(result.hasWinner) return { running: false, ...result };\n        }\n\n        for(let i = 1; i <= this.cols - this.sequence; i++) {\n            const result = this.findSequenceInArray(this.getDecrescentDiagonal(0, i));\n            if(result.hasWinner) return { running: false, ...result };\n        }\n\n        for(let i = 0; i < this.rows; i++) {\n            for(let j = 0; j < this.cols; j++) {\n                if(this.state.squares[i][j] === -1) return { running: true };\n            }\n        }\n        \n        return { running: false, hasWinner: false };\n    }\n\n    markSquare(i, j) {\n        if(!this.state.running || this.state.squares[i][j] !== -1) return;\n\n        const squares = this.state.squares.slice();\n        let turn;\n        squares[i][j] = turn = this.state.turn;\n        const gameState = this.calculateGameState();\n\n        if(gameState.running)\n            turn = this.state.turn < this.players.length - 1 ? this.state.turn + 1 : 0;\n        else if(!gameState.hasWinner)\n            turn = -1;\n\n        this.setState({ squares, turn, ...gameState });\n\n        if(gameState.running && this.players[turn].isBot()) {\n            setTimeout(() => {\n                const square = this.players[turn].play();\n                this.markSquare(square.rowIndex, square.colIndex);\n            }, 100);\n        }\n    }\n\n    handleSquareClick(i, j) {\n        if(this.state.running && this.state.squares[i][j] === -1 && !this.players[this.state.turn].isBot())\n            this.markSquare(i, j);\n    }\n  \n    renderSquare(i, j) {\n        return (\n            <Square\n                key={i * this.cols + j}\n                onClick={() => this.handleSquareClick(i, j)}\n                value={this.state.squares[i][j] !== -1 ? this.players[this.state.squares[i][j]].getSymbol() : \"\"}\n                cursor={!this.state.running || this.state.squares[i][j] !== -1 ? \"default\" : \"pointer\"}\n                size={400 / Math.max(this.rows, this.cols)}\n            />\n        );\n    }\n    \n    renderAllSquares() {\n        const squaresElements = [];\n        for(let i = 0; i < this.rows; i++)\n            for(let j = 0; j < this.cols; j++)\n                squaresElements.push(this.renderSquare(i, j));\n        return squaresElements;\n    }\n\n    renderPlayerButton(playerIndex) {\n        let playerButtonStyles = {};\n        if(this.state.turn === playerIndex)\n            playerButtonStyles = { backgroundColor: \"#00aaff\", color: \"white\" };\n        return (\n            <button key={playerIndex} style={playerButtonStyles}>\n                { this.players[playerIndex].getName() }\n            </button>\n        )\n    }\n\n    renderAllPlayerButtons() {\n        const playerButtons = [];\n        for(let i = 0; i < this.players.length; i++) {\n            playerButtons.push(this.renderPlayerButton(i));\n        }\n        return playerButtons;\n    }\n\n    render() {\n        return (\n            <div className=\"Game\">\n                <div className=\"Board\"\n                    style={{\n                        gridTemplateColumns: \"repeat(\" + this.cols + \", auto)\",\n                        width: this.cols < this.rows ? this.cols/this.rows * 400 + \"px\": \"400px\"\n                    }}>\n                    { this.renderAllSquares() }\n                </div>\n                <div className=\"PlayersPanel\">\n                    { this.renderAllPlayerButtons() }\n                </div>\n                <div className=\"ControlPanel\">\n                    <button className=\"Reset\" onClick={ () => this.reset() }>Reset</button>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Home from '../Home/Home';\nimport Header from '../Header/Header';\nimport Game from '../Game/Game';\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        const url = new URL(window.location);\n        this.page = url.searchParams.get(\"p\") || \"home\";\n        this.rows = url.searchParams.get(\"rows\") || 3;\n        this.cols = url.searchParams.get(\"cols\") || 3;\n        this.sequence = url.searchParams.get(\"seq\") || 3;\n        this.players = url.searchParams.get(\"players\");\n    }\n    render () {\n        if(this.page === \"home\")\n            return (\n                <div className=\"App\">\n                    <Header />\n                    <Home />\n                </div>\n            );\n        else\n            return (\n                <div className=\"App\">\n                    <Header />\n                    <Game rows={this.rows} cols={this.cols} sequence={this.sequence} players={this.players} />\n                </div>\n            );\n    };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}